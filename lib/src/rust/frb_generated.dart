// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/simple.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
    bool forceSameCodegenVersion = true,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
      forceSameCodegenVersion: forceSameCodegenVersion,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiSimpleInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.11.1';

  @override
  int get rustContentHash => -811015048;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'rust_lib_open_anki',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  Future<ExtractResult> crateApiSimpleExtractApkg({
    required String apkgPath,
    required String baseDir,
  });

  Future<SingleNoteResult> crateApiSimpleGetDeckNote({
    required String sqlitePath,
    required PlatformInt64 noteId,
    required String version,
  });

  Future<DeckNotesResult> crateApiSimpleGetDeckNotes({
    required String sqlitePath,
  });

  String crateApiSimpleGreet({required String name});

  Future<void> crateApiSimpleInitApp();

  Stream<String> crateApiSimpleRegisterLogCallback();
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<ExtractResult> crateApiSimpleExtractApkg({
    required String apkgPath,
    required String baseDir,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(apkgPath, serializer);
          sse_encode_String(baseDir, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 1,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_extract_result,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiSimpleExtractApkgConstMeta,
        argValues: [apkgPath, baseDir],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleExtractApkgConstMeta => const TaskConstMeta(
    debugName: "extract_apkg",
    argNames: ["apkgPath", "baseDir"],
  );

  @override
  Future<SingleNoteResult> crateApiSimpleGetDeckNote({
    required String sqlitePath,
    required PlatformInt64 noteId,
    required String version,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(sqlitePath, serializer);
          sse_encode_i_64(noteId, serializer);
          sse_encode_String(version, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 2,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_single_note_result,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiSimpleGetDeckNoteConstMeta,
        argValues: [sqlitePath, noteId, version],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleGetDeckNoteConstMeta => const TaskConstMeta(
    debugName: "get_deck_note",
    argNames: ["sqlitePath", "noteId", "version"],
  );

  @override
  Future<DeckNotesResult> crateApiSimpleGetDeckNotes({
    required String sqlitePath,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(sqlitePath, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 3,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_deck_notes_result,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiSimpleGetDeckNotesConstMeta,
        argValues: [sqlitePath],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleGetDeckNotesConstMeta => const TaskConstMeta(
    debugName: "get_deck_notes",
    argNames: ["sqlitePath"],
  );

  @override
  String crateApiSimpleGreet({required String name}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(name, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleGreetConstMeta,
        argValues: [name],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleGreetConstMeta =>
      const TaskConstMeta(debugName: "greet", argNames: ["name"]);

  @override
  Future<void> crateApiSimpleInitApp() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 5,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleInitAppConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleInitAppConstMeta =>
      const TaskConstMeta(debugName: "init_app", argNames: []);

  @override
  Stream<String> crateApiSimpleRegisterLogCallback() {
    final sink = RustStreamSink<String>();
    unawaited(
      handler.executeNormal(
        NormalTask(
          callFfi: (port_) {
            final serializer = SseSerializer(generalizedFrbRustBinding);
            sse_encode_StreamSink_String_Sse(sink, serializer);
            pdeCallFfi(
              generalizedFrbRustBinding,
              serializer,
              funcId: 6,
              port: port_,
            );
          },
          codec: SseCodec(
            decodeSuccessData: sse_decode_unit,
            decodeErrorData: null,
          ),
          constMeta: kCrateApiSimpleRegisterLogCallbackConstMeta,
          argValues: [sink],
          apiImpl: this,
        ),
      ),
    );
    return sink.stream;
  }

  TaskConstMeta get kCrateApiSimpleRegisterLogCallbackConstMeta =>
      const TaskConstMeta(
        debugName: "register_log_callback",
        argNames: ["sink"],
      );

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  Map<String, String> dco_decode_Map_String_String_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
      dco_decode_list_record_string_string(
        raw,
      ).map((e) => MapEntry(e.$1, e.$2)),
    );
  }

  @protected
  RustStreamSink<String> dco_decode_StreamSink_String_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  NotetypeExt dco_decode_box_autoadd_notetype_ext(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_notetype_ext(raw);
  }

  @protected
  CardExt dco_decode_card_ext(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return CardExt(
      id: dco_decode_i_64(arr[0]),
      nid: dco_decode_i_64(arr[1]),
      ord: dco_decode_i_64(arr[2]),
      type: dco_decode_i_64(arr[3]),
      queue: dco_decode_i_64(arr[4]),
      due: dco_decode_i_64(arr[5]),
    );
  }

  @protected
  DeckNotesResult dco_decode_deck_notes_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return DeckNotesResult(
      notes: dco_decode_list_note_ext(arr[0]),
      notetypes: dco_decode_list_notetype_ext(arr[1]),
      fields: dco_decode_list_field_ext(arr[2]),
      cards: dco_decode_list_card_ext(arr[3]),
    );
  }

  @protected
  ExtractResult dco_decode_extract_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return ExtractResult(
      dir: dco_decode_String(arr[0]),
      md5: dco_decode_String(arr[1]),
      mediaMap: dco_decode_Map_String_String_None(arr[2]),
      version: dco_decode_String(arr[3]),
    );
  }

  @protected
  FieldExt dco_decode_field_ext(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return FieldExt(
      id: dco_decode_i_64(arr[0]),
      notetypeId: dco_decode_i_64(arr[1]),
      name: dco_decode_String(arr[2]),
      ord: dco_decode_i_64(arr[3]),
    );
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<CardExt> dco_decode_list_card_ext(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_card_ext).toList();
  }

  @protected
  List<FieldExt> dco_decode_list_field_ext(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_field_ext).toList();
  }

  @protected
  List<NoteExt> dco_decode_list_note_ext(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_note_ext).toList();
  }

  @protected
  List<NotetypeExt> dco_decode_list_notetype_ext(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_notetype_ext).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<(String, String)> dco_decode_list_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_string_string).toList();
  }

  @protected
  NoteExt dco_decode_note_ext(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return NoteExt(
      id: dco_decode_i_64(arr[0]),
      guid: dco_decode_String(arr[1]),
      mid: dco_decode_i_64(arr[2]),
      flds: dco_decode_list_String(arr[3]),
      notetypeName: dco_decode_String(arr[4]),
      fieldNames: dco_decode_list_String(arr[5]),
    );
  }

  @protected
  NotetypeExt dco_decode_notetype_ext(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return NotetypeExt(
      id: dco_decode_i_64(arr[0]),
      name: dco_decode_String(arr[1]),
      config: dco_decode_opt_String(arr[2]),
    );
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  NotetypeExt? dco_decode_opt_box_autoadd_notetype_ext(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_notetype_ext(raw);
  }

  @protected
  (String, String) dco_decode_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (dco_decode_String(arr[0]), dco_decode_String(arr[1]));
  }

  @protected
  SingleNoteResult dco_decode_single_note_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return SingleNoteResult(
      note: dco_decode_note_ext(arr[0]),
      notetype: dco_decode_opt_box_autoadd_notetype_ext(arr[1]),
      fields: dco_decode_list_field_ext(arr[2]),
      ord: dco_decode_i_64(arr[3]),
      front: dco_decode_String(arr[4]),
      back: dco_decode_String(arr[5]),
      css: dco_decode_String(arr[6]),
    );
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  Map<String, String> sse_decode_Map_String_String_None(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_string(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  RustStreamSink<String> sse_decode_StreamSink_String_Sse(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  NotetypeExt sse_decode_box_autoadd_notetype_ext(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_notetype_ext(deserializer));
  }

  @protected
  CardExt sse_decode_card_ext(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_i_64(deserializer);
    var var_nid = sse_decode_i_64(deserializer);
    var var_ord = sse_decode_i_64(deserializer);
    var var_type = sse_decode_i_64(deserializer);
    var var_queue = sse_decode_i_64(deserializer);
    var var_due = sse_decode_i_64(deserializer);
    return CardExt(
      id: var_id,
      nid: var_nid,
      ord: var_ord,
      type: var_type,
      queue: var_queue,
      due: var_due,
    );
  }

  @protected
  DeckNotesResult sse_decode_deck_notes_result(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_notes = sse_decode_list_note_ext(deserializer);
    var var_notetypes = sse_decode_list_notetype_ext(deserializer);
    var var_fields = sse_decode_list_field_ext(deserializer);
    var var_cards = sse_decode_list_card_ext(deserializer);
    return DeckNotesResult(
      notes: var_notes,
      notetypes: var_notetypes,
      fields: var_fields,
      cards: var_cards,
    );
  }

  @protected
  ExtractResult sse_decode_extract_result(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_dir = sse_decode_String(deserializer);
    var var_md5 = sse_decode_String(deserializer);
    var var_mediaMap = sse_decode_Map_String_String_None(deserializer);
    var var_version = sse_decode_String(deserializer);
    return ExtractResult(
      dir: var_dir,
      md5: var_md5,
      mediaMap: var_mediaMap,
      version: var_version,
    );
  }

  @protected
  FieldExt sse_decode_field_ext(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_i_64(deserializer);
    var var_notetypeId = sse_decode_i_64(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_ord = sse_decode_i_64(deserializer);
    return FieldExt(
      id: var_id,
      notetypeId: var_notetypeId,
      name: var_name,
      ord: var_ord,
    );
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<CardExt> sse_decode_list_card_ext(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <CardExt>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_card_ext(deserializer));
    }
    return ans_;
  }

  @protected
  List<FieldExt> sse_decode_list_field_ext(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <FieldExt>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_field_ext(deserializer));
    }
    return ans_;
  }

  @protected
  List<NoteExt> sse_decode_list_note_ext(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <NoteExt>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_note_ext(deserializer));
    }
    return ans_;
  }

  @protected
  List<NotetypeExt> sse_decode_list_notetype_ext(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <NotetypeExt>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_notetype_ext(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<(String, String)> sse_decode_list_record_string_string(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, String)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_string(deserializer));
    }
    return ans_;
  }

  @protected
  NoteExt sse_decode_note_ext(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_i_64(deserializer);
    var var_guid = sse_decode_String(deserializer);
    var var_mid = sse_decode_i_64(deserializer);
    var var_flds = sse_decode_list_String(deserializer);
    var var_notetypeName = sse_decode_String(deserializer);
    var var_fieldNames = sse_decode_list_String(deserializer);
    return NoteExt(
      id: var_id,
      guid: var_guid,
      mid: var_mid,
      flds: var_flds,
      notetypeName: var_notetypeName,
      fieldNames: var_fieldNames,
    );
  }

  @protected
  NotetypeExt sse_decode_notetype_ext(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_i_64(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_config = sse_decode_opt_String(deserializer);
    return NotetypeExt(id: var_id, name: var_name, config: var_config);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  NotetypeExt? sse_decode_opt_box_autoadd_notetype_ext(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_notetype_ext(deserializer));
    } else {
      return null;
    }
  }

  @protected
  (String, String) sse_decode_record_string_string(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  SingleNoteResult sse_decode_single_note_result(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_note = sse_decode_note_ext(deserializer);
    var var_notetype = sse_decode_opt_box_autoadd_notetype_ext(deserializer);
    var var_fields = sse_decode_list_field_ext(deserializer);
    var var_ord = sse_decode_i_64(deserializer);
    var var_front = sse_decode_String(deserializer);
    var var_back = sse_decode_String(deserializer);
    var var_css = sse_decode_String(deserializer);
    return SingleNoteResult(
      note: var_note,
      notetype: var_notetype,
      fields: var_fields,
      ord: var_ord,
      front: var_front,
      back: var_back,
      css: var_css,
    );
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  void sse_encode_AnyhowException(
    AnyhowException self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_Map_String_String_None(
    Map<String, String> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_string(
      self.entries.map((e) => (e.key, e.value)).toList(),
      serializer,
    );
  }

  @protected
  void sse_encode_StreamSink_String_Sse(
    RustStreamSink<String> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
      self.setupAndSerialize(
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
      ),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_box_autoadd_notetype_ext(
    NotetypeExt self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_notetype_ext(self, serializer);
  }

  @protected
  void sse_encode_card_ext(CardExt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.id, serializer);
    sse_encode_i_64(self.nid, serializer);
    sse_encode_i_64(self.ord, serializer);
    sse_encode_i_64(self.type, serializer);
    sse_encode_i_64(self.queue, serializer);
    sse_encode_i_64(self.due, serializer);
  }

  @protected
  void sse_encode_deck_notes_result(
    DeckNotesResult self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_note_ext(self.notes, serializer);
    sse_encode_list_notetype_ext(self.notetypes, serializer);
    sse_encode_list_field_ext(self.fields, serializer);
    sse_encode_list_card_ext(self.cards, serializer);
  }

  @protected
  void sse_encode_extract_result(ExtractResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.dir, serializer);
    sse_encode_String(self.md5, serializer);
    sse_encode_Map_String_String_None(self.mediaMap, serializer);
    sse_encode_String(self.version, serializer);
  }

  @protected
  void sse_encode_field_ext(FieldExt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.id, serializer);
    sse_encode_i_64(self.notetypeId, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_i_64(self.ord, serializer);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_card_ext(List<CardExt> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_card_ext(item, serializer);
    }
  }

  @protected
  void sse_encode_list_field_ext(
    List<FieldExt> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_field_ext(item, serializer);
    }
  }

  @protected
  void sse_encode_list_note_ext(List<NoteExt> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_note_ext(item, serializer);
    }
  }

  @protected
  void sse_encode_list_notetype_ext(
    List<NotetypeExt> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_notetype_ext(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_record_string_string(
    List<(String, String)> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_string(item, serializer);
    }
  }

  @protected
  void sse_encode_note_ext(NoteExt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.id, serializer);
    sse_encode_String(self.guid, serializer);
    sse_encode_i_64(self.mid, serializer);
    sse_encode_list_String(self.flds, serializer);
    sse_encode_String(self.notetypeName, serializer);
    sse_encode_list_String(self.fieldNames, serializer);
  }

  @protected
  void sse_encode_notetype_ext(NotetypeExt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.id, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_opt_String(self.config, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_notetype_ext(
    NotetypeExt? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_notetype_ext(self, serializer);
    }
  }

  @protected
  void sse_encode_record_string_string(
    (String, String) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_single_note_result(
    SingleNoteResult self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_note_ext(self.note, serializer);
    sse_encode_opt_box_autoadd_notetype_ext(self.notetype, serializer);
    sse_encode_list_field_ext(self.fields, serializer);
    sse_encode_i_64(self.ord, serializer);
    sse_encode_String(self.front, serializer);
    sse_encode_String(self.back, serializer);
    sse_encode_String(self.css, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }
}
